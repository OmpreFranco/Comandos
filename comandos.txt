Comandos de diferentes aplicaciones y/o aeae programas 

Bash

ls ---> lista los elementos de la carpeta
cd ---> entra en un directorio 
mv ---> mueve un archivo a un directorio 
rm ---> borra un archivo 
lscpu ---> muestras caracteristicas de la computadora
lspci -v ---> Da info sobre las distintas placas de la compu
cat ---> te escribe el archivo en pantalla
chown <a quien> <archivo> ---> te cambia el dueno del archivo
chown -R <a quien> <directorioo> ---> te cambia el dueno del directorio y todo lo que esta adentro
chmod <644> <archivo> ---> me cambia el modo del archivo para que no sea ejecutable 
history ---> Me da la historia de los comandos introducidos en la terminal 
pwd ---> Nos dice el path completo de donde estamos parados 
chmod +x *.desktop ---> para cambiar el modo de un archivo a confiable y poder lanzarlo como un icono en el desktop 
speedtest-cli ---> Programa para ver conexion a internet
wget [nombre de pagina web] ---> descarga con wget
wget -o [nombre desado][nombre de pagina web] --->descarga con wget cambiando el nombre
wget -c [nombre]  ---> Continua una descarga ininterrumpida
convert -resize 1024X768 imagen_inicio imagen_final ---> Me cambia el tamaño de la imagen inicio 
Git 

git status ---> me dice el estado del trabajo y si tengo archivos pendientes de agregar/ comitear
git branch <name> ---> Me crea una nueva rama con nombre <name>
git branch ---> me dice en donde estoy parado del arbol de ramas
git branch -d <branch> ----> Borra la rama 
git add ---> me agrega un archivo del directorio
git add . ---> me agrega todos los archivos pendientes a agregar 
git add <nombre de la carpeta nueva>/* --->
git remote add <name> <url> ---> me agrega una direccion remota para subir/bajar archivos
git remote -v ---> me muestra las direcciones remotas
git init <name> ---> inicia un repositorio git 
git log ---> me dice la historia de los commit 
git pull ---> trae las cosas desde el repositorio remoto
git pull --all ---> trae las cosas desde el repositorio remoto(todas las ramas)
git push ---> sube a las cosas al repositorio remoto 
git push --set--upstream <name.remote> <namelocal> ---> Me sube la rama actual 
git push -u ---> Hace lo mismo que la de arriba
git push -u origin master ---> me sirve para cuando tengo el repositorio en la cpu y la master aca subirla y que se cree alla arriba
git clone <url> ---> me baja el fichero de la url y me crea una carpeta con dicho fichero 
git diff <archivo> <archivo> ---> marca las diferencias entre dos archivos 
git fetch --all ---> updatea las locales pero no crea nuevas 
git checkout <branch> ---> Me cambia a la rama que puse 
git checkout <nro.commit> ---> vuelve a ese commit por si queremos debbugear o no hechar moco, te pide crear una rama nueva dsp 
git checkout <archivo> ---> vuelve al ultimo archivo en el cual fue comiteado
git ignore <archivo> ---> ignora el archivo 
git merge <rama1> <rama2> ---> mergea la rama 1 con la rama 2 


LaTEX

\pagebreak ---> Pasa a la pagina siguiente
\textbf{} ---> Negrita
\underline{} ---> Subrayado
\textit{} ---> Italico
 \emph{} ---> enfatiza una frase 
Mathplotlib 

plt.figure(numero_figura) ---> Nos permite crear un grafico con el nomre o numero de fig
plt.plot(x , y , lw =(ancho de linea) , "color" , label = "nombre") ---> Plotea un grafico con los siguientes parametros
plt.grid() ---> Pone una grilla en el grafico 
plt.ylabel("Nombre") ---> Le pone nombre al eje y 
plt.xlabel("Nombre") ---> Le pone nombre al eje x
plt.ylim(num,num) ---> Limita el grafico entre dos numeros en el eje y 
plt.xlim(num,num) ---> Limita el grafico entre dos numeros en el eje x
plt.annotate("Nombre" , xy = (num,num) , nytext = (num,num)) ---> Escribe anotaciones en el grafico sobre un punto en particular
plt.axis([num,num,num,num]) ---> Tamano de los ejes 
plt.loglog() ---> Plotea con los mismos parametros que el plot pero en escala logaritmica en x e y 
plt.semilogx() ---> Escala logritmica en x 
plt.show() ---> Muestra el grafico
plt.title(name) ---> Nombre del titulo del grafico
plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3, ncol=2, mode="expand", borderaxespad=0.) ---> Me crea una caja arriba donde van las legends, sino no aparecen


red dashes, blue squares and green triangles --- "r--" , "bs", "g^"



Compilación

gcc <program.> -o <ejecutable_name> ---> Nos comipla el programa y el flag nos deja poner el nombre del ejecutable
gcc -E <program.> -o <ejecutable_name.pp.x> ---> corta al compilador en la etapa pre-procesador 
gcc -S <program.> -o <ejecutable_name.asm> ---> corta al compilador en la etapa Compilador 1 y me da el archivo assembler
gcc -c <program.> -o <ejecutable_name.o> ---> corta al compilador en la etapa Compilador 2 y me da el objeto
gcc -g <program> -o <ejecutable_name> ---> da informacion para el debbuger
gcc -o0 <program> -o <ejecutable_name> ---> el compilador no realiza ninguna optimización 
